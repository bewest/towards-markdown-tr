Ciclo de trabajo
================

## Git Flow

Usamos [git-flow](https://github.com/nvie/gitflow).

Configuración:

* master   => master
* develop  => queue
* feature  => traduccion
* hotfix   => hotfix
* release  => edicion

Ver el archivo *gitflow*.


### Más información

* [Modelo de ramas](http://nvie.com/git-model)
* [Cheatsheet](http://danielkummer.github.io/git-flow-cheatsheet/)


## Propuesta de texto

* Moverse a la rama *queue* y agregarlo dentro del directorio *\_queue* en
  texto plano.

Comandos:

    git checkout queue
    git add _queue/nombre-del-articulo.markdown
    git commit


## Traducción

* Desde la rama *queue*, crear una nueva rama con el articulo a traducir.

* En general la traducción se hace sobre el mismo texto original, con la
  traducción de cada párrafo inmediatamente debajo del original (es decir,
  intercalados).

* Para facilitar la revisión, generar un commit después por cada párrafo
  traducido.

Comandos:

    git flow feature start nombre-del-articulo
    # Después de traducir un párrafo
    git commit -a -m "Nombre del artículo, párrafo #"


## Revisión

* Se hace una lectura de prueba y se eliminan los párrafos en el idioma
  original.

* Se mergea en la rama *queue*.

Comandos:

    git flow feature finish nombre-del-articulo


## Publicación

* Se crea una *edicion*.

* El artículo se mueve a
  \_posts/AAAA-MM-DD-nombre\_del\_articulo.markdown y se corre el comando
  `jekyll build` para compilar el sitio en HTML.

Comandos:

    git flow release start AAAA-MM-DD
    git mv _queue/nombre-del-articulo.markdown _posts/AAAA-MM-DD-nombre_del_articulo.markdown
    git commit
    git flow release finish AAAA-MM-DD
    jekyll build


## Correcciones después de publicado

* Usar hotfixes

Comandos:

    git flow hotfix start nombre-del-articulo
    (correcciones...)
    git flow hotfix finish nombre-del-articulo
    jekyll build


# vim:set ts=2 sw=2 syntax=markdown et:
